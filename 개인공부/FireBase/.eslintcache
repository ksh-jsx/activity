[{"C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\App.js":"1","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\fbase.js":"2","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\index.js":"3","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\routes\\Auth.js":"4","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\Navigation.js":"5","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\Router.js":"6","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\routes\\Profile.js":"7","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\routes\\Home.js":"8","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\Nweet.js":"9","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\NweetFactory.js":"10","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\SignInForm.js":"11"},{"size":1085,"mtime":1607158191188,"results":"12","hashOfConfig":"13"},{"size":740,"mtime":1606994398762,"results":"14","hashOfConfig":"13"},{"size":242,"mtime":1607159014608,"results":"15","hashOfConfig":"13"},{"size":1365,"mtime":1638795748539,"results":"16","hashOfConfig":"13"},{"size":333,"mtime":1607156559117,"results":"17","hashOfConfig":"13"},{"size":926,"mtime":1607156904708,"results":"18","hashOfConfig":"13"},{"size":1099,"mtime":1607157012909,"results":"19","hashOfConfig":"13"},{"size":850,"mtime":1607157635577,"results":"20","hashOfConfig":"13"},{"size":1837,"mtime":1607157735894,"results":"21","hashOfConfig":"13"},{"size":1993,"mtime":1607157736988,"results":"22","hashOfConfig":"13"},{"size":1744,"mtime":1638795628197,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i3iaya",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\App.js",[],"C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\fbase.js",[],"C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\index.js",[],["52","53"],"C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\routes\\Auth.js",["54","55","56"],"C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\Navigation.js",[],"C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\Router.js",[],"C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\routes\\Profile.js",["57"],"import React, { useState } from \"react\";\r\nimport { authService } from \"fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n        />\r\n        <input type=\"submit\" value=\"Update Profile\" />\r\n      </form>\r\n      <button onClick={onLogOutClick}>Log Out</button>\r\n    </>\r\n  );\r\n};","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\routes\\Home.js",["58"],"import React, { useState, useEffect } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweets, setNweets] = useState([]);\r\n  useEffect(() => {\r\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n      const nweetArray = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setNweets(nweetArray);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <NweetFactory userObj={userObj} />\r\n      <div>\r\n        {nweets.map((nweet) => (\r\n          <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwner={nweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\Nweet.js",["59"],"import React, { useState } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n  \r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n    if (ok) {\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n      text: newNweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNweet(value);\r\n  };\r\n  return (\r\n    <div>\r\n      {editing ? (\r\n        <>\r\n        <h4>&nbsp;</h4>\r\n          <form onSubmit={onSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your nweet\"\r\n              value={newNweet}\r\n              required\r\n              onChange={onChange}\r\n            />\r\n            <input type=\"submit\" value=\"Update Nweet\" />\r\n          </form>\r\n          <button onClick={toggleEditing}>Cancel</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentUrl && (\r\n            <img src={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\r\n          )}\r\n          {isOwner && (\r\n            <>\r\n              <button onClick={onDeleteClick}>Delete Nweet</button>\r\n              <button onClick={toggleEditing}>Edit Nweet</button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nweet;","C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\NweetFactory.js",["60"],"import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { storageService, dbService } from \"fbase\";\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n  const [nweet, setNweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const nweetObj = {\r\n      text: nweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"nweets\").add(nweetObj);\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n  const onClearAttachment = () => setAttachment(null);\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        value={nweet}\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        placeholder=\"What's on your mind?\"\r\n        maxLength={120}\r\n      />\r\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n      <input type=\"submit\" value=\"Nweet\" />\r\n      {attachment && (\r\n        <div>\r\n          <img src={attachment} width=\"50px\" height=\"50px\" />\r\n          <button onClick={onClearAttachment}>Clear</button>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\nexport default NweetFactory;",["61","62"],"C:\\Users\\shkim\\Desktop\\activity\\개인공부\\FireBase\\src\\components\\SignInForm.js",["63","64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":4,"column":8,"nodeType":"71","messageId":"72","endLine":4,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":18,"column":15,"nodeType":"71","messageId":"75","endLine":18,"endColumn":19},{"ruleId":"76","severity":1,"message":"77","line":18,"column":15,"nodeType":"78","messageId":"79","endLine":18,"endColumn":30},{"ruleId":"80","severity":1,"message":"81","line":5,"column":1,"nodeType":"82","endLine":42,"endColumn":3},{"ruleId":"69","severity":1,"message":"83","line":2,"column":21,"nodeType":"71","messageId":"72","endLine":2,"endColumn":35},{"ruleId":"84","severity":1,"message":"85","line":50,"column":13,"nodeType":"86","endLine":50,"endColumn":76},{"ruleId":"84","severity":1,"message":"85","line":62,"column":11,"nodeType":"86","endLine":62,"endColumn":62},{"ruleId":"65","replacedBy":"87"},{"ruleId":"67","replacedBy":"88"},{"ruleId":"69","severity":1,"message":"89","line":8,"column":22,"nodeType":"71","messageId":"72","endLine":8,"endColumn":35},{"ruleId":"69","severity":1,"message":"90","line":9,"column":10,"nodeType":"71","messageId":"72","endLine":9,"endColumn":15},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'TwitterIcon' is defined but never used.","Identifier","unusedVar","no-const-assign","'name' is constant.","const","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'storageService' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["91"],["92"],"'setNewAccount' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]